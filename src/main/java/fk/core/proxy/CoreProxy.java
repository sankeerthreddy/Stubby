package fk.core.proxy;

import fk.core.network.IHTTPCallActions;
import fk.core.network.IHTTPResponse;
import fk.core.network.impl.HTTPFactory;
import fk.references.ConfigReferences;
import fk.references.HTTPReferences;
import fk.utilities.StringUtils;
import org.apache.log4j.Logger;

/**
 * Created by sankeerth.reddy on 16/12/14.
 */
public class CoreProxy {
    private static Logger LOGGER = Logger.getLogger(CoreProxy.class);

    /**
     * Proxy call which acts as interpreter
     *
     * @param url input as actual get call url from the test suite
     * @return response created by dynamicResponseGenerator
     */
    public static IHTTPResponse makeProxyGetCall(String url) {
        IHTTPCallActions httpCallActions = HTTPFactory.getHTTPCallActionsInstance();
        if (makeProxyPostCall(url).getStatusCode() != 200) {
            LOGGER.error("Post Call failed. Kindly check the mock service");
            System.exit(1);
        }
        IHTTPResponse response = httpCallActions.makeGetCall(url);

        return response;
    }

    /**
     * posts the response generated by the dynamicResponseGenerator
     *
     * @param url input as actual get call url from the test suite
     * @return response of the post call
     */
    private static IHTTPResponse makeProxyPostCall(String url) {
        IHTTPCallActions httpCallActions = HTTPFactory.getHTTPCallActionsInstance();
        //todo: split the url and find the url params and according populate the response body
        String endPoint = StringUtils.substringAfter(url, "/");
        if (!isClass(ConfigReferences.PARENT_CLASS_PACKAGE + "." + endPoint)) {
            LOGGER.error("Class is not declared for endpoint : " + endPoint);
            System.exit(1);
        }

        String body = "";
        return httpCallActions.makePostCall(HTTPReferences.endPointURL, configurePostParams(endPoint, body));
    }

    /**
     * configures the post params for the dummy post call
     *
     * @param endPoint specific endpoint for an API
     * @param body     dynamic response generated by responseGenerator
     * @return post parameters string
     */
    private static String configurePostParams(String endPoint, String body) {

        return "[{\"request\": {\"url\": \"^/" + endPoint + "\",\"method\":" +
                " \"GET\"},\"response\": {\"status\": 200,\"headers\": {\"Content-Type\":" +
                " \"text/plain\"},\"body\": \"" + body + "\"}}]";
    }

    /**
     * checks if the endPoint has specified class or not
     *
     * @param endPoint specific endpoint for an API
     * @return boolean value which tells whether class is defined
     */
    private static boolean isClass(String endPoint) {
        boolean exist = true;
        try {
            Class.forName(endPoint);
        } catch (ClassNotFoundException e) {
            exist = false;
            LOGGER.error("ClassNotFound for EndPoint: " + endPoint, e);
        }
        return exist;
    }
}
